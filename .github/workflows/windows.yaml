name: windows-ci
on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
      - support-windows-tests-ci
  # pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  checks: write
  pull-requests: write

env:
  BUILD_TARGET: "x86_64-unknown-linux-gnu"
jobs:
  # Comprehensive Windows cargo make task testing matrix
  windows-cargo-make-matrix:
    runs-on: windows-2022
    env:
      CARGO_BUILD_JOBS: 10
    if: github.event_name == 'push'
    continue-on-error: true  # Don't fail the workflow on individual task failures
    strategy:
      fail-fast: false  # Test all tasks even if some fail
      matrix:
        task:
          # Core Development Workflow
          - "dev-flow"
          # Build Tools
          - "build"
          - "wit"
          - "check-wit"
          # Code Quality Tools
          - "check"
          - "fix"
          # Testing Tools
          - "unit-tests"
          - "test"
          - "worker-executor-tests"
          - "integration-tests"
          - "sharding-tests-debug"
          # API Testing Tools
          - "api-tests-http"
          - "api-tests-grpc"
          # Configuration Tools
          - "generate-configs"
          - "check-configs"
          # OpenAPI Tools
          - "generate-openapi"
          - "check-openapi"
          # Service Tools
          - "run"
          - "run-with-login-enabled"
          # Docker Tools (optional)
          - "elastic-up"
    env:
      CARGO_BUILD_JOBS: 4
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
      GOLEM_USE_LOCAL_REDIS: "false"  # Use Testcontainers Redis by default
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install winget (required for Windows dependency installation)
        uses: Cyberboss/install-winget@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Windows dependencies via winget
        run: |
          # Verify winget is available
          winget --version
          
          # Install Visual Studio Build Tools (C++ toolchain)
          winget install --id Microsoft.VisualStudio.2022.BuildTools -e --override "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --passive --norestart" --accept-source-agreements --accept-package-agreements --disable-interactivity
          
          # Install CMake
          winget install --id Kitware.CMake -e --accept-source-agreements --accept-package-agreements --disable-interactivity
          
          # Install Podman for Testcontainers Redis
          winget install --id RedHat.Podman -e --accept-source-agreements --accept-package-agreements --disable-interactivity
          
          # Install Docker Desktop (optional, for docker-based tasks)
          winget install --id Docker.DockerDesktop -e --accept-source-agreements --accept-package-agreements --disable-interactivity || echo "Docker install failed, continuing..."

      - name: Install Redis and Memurai via Chocolatey
        uses: amitie10g/install-package@v1
        with:
          choco: redis memurai-developer

      - name: Verify Redis/Memurai installations
        run: |
          Write-Host "Verifying Redis/Memurai installations..."
          
          # Refresh environment variables to make redis/memurai available in PATH
          $env:Path = [Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [Environment]::GetEnvironmentVariable("Path","User")
          
          try {
            memurai --version
            Write-Host "✅ Memurai installed successfully"
          } catch {
            Write-Host "⚠️  Memurai version check failed: $_"
            Write-Host "PATH: $env:Path"
          }
          
          try {
            redis-server --version
            Write-Host "✅ Redis installed successfully" 
          } catch {
            Write-Host "⚠️  Redis version check failed: $_"
            Write-Host "PATH: $env:Path"
          }

      - name: Setup mise and install tools
        uses: jdx/mise-action@v2
        with:
          version: latest
          install: true
          cache: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          experimental: true

      - name: Install cargo-make
        run: |
          echo "Installing cargo-make..."
          cargo install cargo-make --locked
          echo "Verifying cargo-make installation..."
          # Refresh environment variables and PATH
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          # Verify cargo-make is accessible
          cargo make --version
          echo "✅ cargo-make installed and verified successfully"

      - name: Rust cache
        uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: windows-matrix-${{ github.sha }}
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Test cargo make task - ${{ matrix.task }}
        id: cargo_task
        run: |
          echo "::group::Testing cargo make ${{ matrix.task }}"
          $start_time = Get-Date
          $exit_code = 0
          try {
            cargo make ${{ matrix.task }}
            $exit_code = $LASTEXITCODE
            $end_time = Get-Date
            $duration = ($end_time - $start_time).TotalSeconds
            if ($exit_code -eq 0) {
              echo "✅ SUCCESS: cargo make ${{ matrix.task }} (${duration}s)"
              echo "result=success" >> $env:GITHUB_OUTPUT
            } else {
              echo "❌ FAILED: cargo make ${{ matrix.task }} (${duration}s, exit code: $exit_code)"
              echo "result=failure" >> $env:GITHUB_OUTPUT
              exit $exit_code
            }
          } catch {
            $end_time = Get-Date
            $duration = ($end_time - $start_time).TotalSeconds
            echo "💥 ERROR: cargo make ${{ matrix.task }} (${duration}s, exception: $_)"
            echo "result=error" >> $env:GITHUB_OUTPUT
            exit 1
          }
          echo "::endgroup::"

      - name: Collect test results
        if: always()
        run: |
          echo "Task: ${{ matrix.task }}" >> windows-task-results.txt
          echo "Exit Code: $LASTEXITCODE" >> windows-task-results.txt
          echo "---" >> windows-task-results.txt

      - name: Upload task results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-task-results-${{ matrix.task }}
          path: windows-task-results.txt

      # Install cargo2junit for cross-platform test reporting
      - name: Install cargo2junit
        run: cargo install cargo2junit

      # Run tests and generate cross-platform JUnit XML
      - name: Run tests and generate JUnit report
        id: test_run
        run: |
          $env:RUSTC_BOOTSTRAP=1
          # Run tests with JSON output and convert to JUnit XML
          cargo test --workspace -- -Z unstable-options --format json --report-time | Tee-Object results.json
          if ($LASTEXITCODE -ne 0) {
            echo "Tests failed, but continuing to generate report"
          }
          Get-Content results.json | cargo2junit | Out-File junit.xml -Encoding utf8
          echo "junit-generated=true" >> $env:GITHUB_OUTPUT
        continue-on-error: true

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "junit.xml"
          detailed_summary: true
          include_passed: true

      - name: Upload reports and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-ci-artifacts-${{ matrix.task }}-${{ github.run_id }}
          path: |
            results.json
            junit.xml
            target/**/*.log
