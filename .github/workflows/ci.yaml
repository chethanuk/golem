name: CI
on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
      - support-windows-tests-ci
  # pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  checks: write
  pull-requests: write

env:
  BUILD_TARGET: "x86_64-unknown-linux-gnu"

jobs:
  build:
    env:
      CARGO_BUILD_JOBS: 10
    runs-on: blacksmith-16vcpu-ubuntu-2204
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Setup Rust
        run: rustup update stable --no-self-update && rustup default stable
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: debug
          cache-all-crates: true
          save-if: true
      - uses: davidB/rust-cargo-make@v1
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Purge v8 from cache
        run: cargo make --profile ci clear-v8
      - name: Building all executables
        env:
          QUIET: true
        run: cargo make --profile ci build
        timeout-minutes: 45
      - name: Check openapi is up to date
        run: cargo make --profile ci check-openapi
      - name: Check configs are up to date
        run: cargo make --profile ci check-configs
      - name: Check formatting and clippy rules
        run: cargo make --profile ci check

  unit-tests-and-checks:
    env:
      CARGO_BUILD_JOBS: 10
    runs-on: blacksmith-16vcpu-ubuntu-2204
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Setup Rust
        run: rustup update stable --no-self-update && rustup default stable
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: debug
          cache-all-crates: true
          save-if: false
      - uses: davidB/rust-cargo-make@v1
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Purge v8 from cache
        run: cargo make --profile ci clear-v8
      - name: Unit tests
        run: cargo make --profile ci unit-tests
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "**/target/report-*.xml"
          detailed_summary: true
          include_passed: true

  worker-tests:
    env:
      CARGO_BUILD_JOBS: 10
    runs-on: blacksmith-16vcpu-ubuntu-2204
    strategy:
      fail-fast: false
      matrix:
        group:
          - name: untagged
          - name: rdbms-service
          - name: group1
          - name: group2
          - name: group3
          - name: group4
          - name: group5
          - name: group6
          - name: group7
          - name: group8
    name: worker-tests-${{ matrix.group.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Setup Rust
        run: rustup update stable --no-self-update && rustup default stable
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: debug
          cache-all-crates: true
          save-if: false
      - uses: davidB/rust-cargo-make@v1
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1.35.1
        with:
          redis-version: latest
          auto-start: false
      - name: Purge v8 from cache
        run: cargo make --profile ci clear-v8
      - name: Worker Executor integration tests
        run: cargo make --profile ci worker-executor-tests-${{ matrix.group.name }}
        timeout-minutes: 40
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "**/target/report-*.xml"
          detailed_summary: true
          include_passed: true

  it:
    env:
      CARGO_BUILD_JOBS: 10
    runs-on: blacksmith-16vcpu-ubuntu-2204
    strategy:
      fail-fast: false
      matrix:
        group:
          - name: integration-tests-group1
            description: "Full integration tests"
          - name: integration-tests-group2
            description: "Component service integration tests"
          - name: integration-tests-group3
            description: "Worker service integration tests"
          - name: integration-tests-group4
            description: "Base service integration tests"
          - name: integration-tests-group5
            description: "Sharding tests"
          - name: api-tests
            description: "API tests"
          - name: cli-integration-tests
            description: "CLI tests"
          - name: template-integration-tests
            description: "Template integration tests"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Setup Rust
        run: rustup update stable --no-self-update && rustup default stable
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: debug
          cache-all-crates: true
          save-if: false
      - uses: davidB/rust-cargo-make@v1
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1.35.1
        with:
          redis-version: latest
          auto-start: false

      - uses: cargo-bins/cargo-binstall@main
        if: matrix.group.name == 'template-integration-tests' || matrix.group.name == 'cli-integration-tests'
      - name: Install cargo-component
        if: matrix.group.name == 'template-integration-tests' || matrix.group.name == 'cli-integration-tests'
        run: cargo install cargo-component@0.21.1
      - name: Install wasm-tools
        if: matrix.group.name == 'template-integration-tests' || matrix.group.name == 'cli-integration-tests'
        run: cargo binstall --force --locked wasm-tools@1.227.1
      - name: Install wit-bindgen
        if: matrix.group.name == 'template-integration-tests' || matrix.group.name == 'cli-integration-tests'
        run: cargo binstall --force --locked wit-bindgen-cli@0.40.0

      - name: Purge v8 from cache
        run: cargo make --profile ci clear-v8
      - name: ${{ matrix.group.description }}
        env:
          QUIET: true
        run: cargo make --profile ci ${{ matrix.group.name }}
        timeout-minutes: 45
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "**/target/report-*.xml"
          detailed_summary: true
          include_passed: true

  wasm-rpc-stub:
    runs-on: blacksmith
    env:
      CARGO_BUILD_JOBS: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Setup Rust
        run: rustup update stable --no-self-update && rustup default stable
      - name: Install cargo-component
        run: cargo install --force --locked cargo-component@0.21.1
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: debug
          cache-all-crates: true
          save-if: false
      - uses: davidB/rust-cargo-make@v1
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Purge v8 from cache
        run: cargo make --profile ci clear-v8
      - name: Prepare WIT dependencies
        run: cargo make wit
      - name: Build wasm-rpc in stub mode
        run: cargo component build -p golem-wasm-rpc --no-default-features --features stub

  build-golem-rust:
    runs-on: blacksmith
    steps:
      - uses: actions/checkout@v4
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v1-golem-rust
          shared-key: debug
          cache-all-crates: true
          save-if: false
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check formatting
        run: cargo fmt -- --check
        working-directory: sdks/rust
      - name: Clippy
        run: cargo clippy -- -Dwarnings
        working-directory: sdks/rust
      - name: Tests
        run: cargo test --all-features
        working-directory: sdks/rust

  build-golem-ts:
    runs-on: blacksmith
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: Install dependencies
        working-directory: sdks/ts
        run: |
          npm install
      - name: Generate types
        working-directory: sdks/ts
        run: |
          npm run generate-types
      - name: Run code quality check
        working-directory: sdks/ts
        run: |
          npm run check
      - name: Build the package
        working-directory: sdks/ts
        run: |
          npm run build

  docker-targets-build:
    env:
      CARGO_BUILD_JOBS: 10
    runs-on: blacksmith-16vcpu-ubuntu-2204
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - platform: linux/amd64
            name: linux/amd64
            target: x86_64-unknown-linux-gnu
          - platform: linux/arm64
            name: linux/arm64
            target: aarch64-unknown-linux-gnu
            cross: true
    name: docker-targets-build (${{ matrix.platform.platform }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Prepare
        run: |
          platform=${{ matrix.platform.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Setup Rust
        run: rustup update stable --no-self-update && rustup default stable && rustup target add ${{ matrix.platform.target }}
      - uses: davidB/rust-cargo-make@v1
      - name: Install Rust Target
        run: rustup target add ${{ matrix.platform.target }}
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: debug
          cache-all-crates: true
          save-if: false
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - run: cargo install cross
        if: ${{ matrix.platform.cross }}

      - name: Purge v8 from cache
        run: cargo make --profile ci clear-v8
      - name: Build executables
        run: cargo make --profile ci build-release
        env:
          PLATFORM_OVERRIDE: ${{ matrix.platform.name }}

      - name: Prepare Targets
        env:
          PLATFORM_OVERRIDE: ${{ matrix.platform.name }}
        run: cargo make --profile ci package-release

      - uses: actions/upload-artifact@v4
        name: Upload Targets
        with:
          name: docker-targets-build-${{ env.PLATFORM_PAIR }}
          path: target/${{ matrix.platform.target }}.tar

  docker-publish:
    runs-on: blacksmith
    needs:
      - docker-targets-build
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Prepare
        run: |
          echo "PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        name: Download Targets
        with:
          pattern: docker-targets-build-*
          path: target
          merge-multiple: true
      - name: Extract Targets
        run: |
          ls -R target
          cd target
          for f in *.tar; do tar xvf "$f"; done
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set Docker version
        id: set-version
        run: |
          if [ "${{ github.event_name }}" == 'push' ] && [ "${{ github.ref_type }}" == 'tag' ]; then
            DOCKER_VERSION=$(echo "${{ github.ref }}" | sed 's|^refs/tags/v||')
            echo "DOCKER_VERSION=${DOCKER_VERSION}" >> $GITHUB_ENV
          else
            COMMIT_SHORT_HASH=$(git rev-parse --short=7 HEAD)
            echo "DOCKER_VERSION=${COMMIT_SHORT_HASH}" >> $GITHUB_ENV
          fi
      - uses: jpribyl/action-docker-layer-caching@v0.1.1
        continue-on-error: true
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Extract metadata (tags, labels) for cloud service
        id: meta-cloud-service
        uses: docker/metadata-action@v5
        with:
          images: golemservices/cloud-service
      - name: Build and push cloud-service
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: ./cloud-service/docker/Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-cloud-service.outputs.tags }}
          labels: ${{ steps.meta-cloud-service.outputs.labels }}
      - name: Extract metadata (tags, labels) for worker executor
        id: meta-worker-executor
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-worker-executor
      - name: Build and push worker executor image
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: ./golem-worker-executor/docker/Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-worker-executor.outputs.tags }}
          labels: ${{ steps.meta-worker-executor.outputs.labels }}
      - name: Extract metadata (tags, labels) for golem debugging service
        id: meta-golem-debugging-service
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-debugging-service
      - name: Build and push golem debugging service image
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: ./golem-debugging-service/docker/Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-golem-debugging-service.outputs.tags }}
          labels: ${{ steps.meta-golem-debugging-service.outputs.labels }}
      - name: Extract metadata (tags, labels) for shard manager
        id: meta-shard-manager
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-shard-manager
      - name: Build and push shard manager image
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: ./golem-shard-manager/docker/Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-shard-manager.outputs.tags }}
          labels: ${{ steps.meta-shard-manager.outputs.labels }}
      - name: Extract metadata (tags, labels) for golem component service
        id: meta-golem-component-service
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-component-service
      - name: Build and push golem component service image
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: ./golem-component-service/docker/Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-golem-component-service.outputs.tags }}
          labels: ${{ steps.meta-golem-component-service.outputs.labels }}
      - name: Extract metadata (tags, labels) for golem worker service
        id: meta-golem-worker-service
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-worker-service
      - name: Build and push golem worker service image
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: ./golem-worker-service/docker/Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-golem-worker-service.outputs.tags }}
          labels: ${{ steps.meta-golem-worker-service.outputs.labels }}
      - name: Extract metadata (tags, labels) for golem component compilation service
        id: meta-golem-component-compilation-service
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-component-compilation-service
      - name: Build and push golem component compilation service image
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: ./golem-component-compilation-service/docker/Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-golem-component-compilation-service.outputs.tags }}
          labels: ${{ steps.meta-golem-component-compilation-service.outputs.labels }}
      - name: Extract metadata (tags, labels) for golem router
        id: meta-golem-router
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-router
      - name: Build and push golem router
        uses: useblacksmith/build-push-action@v1
        with:
          context: .
          file: ./golem-router/docker/Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-golem-router.outputs.tags }}
          labels: ${{ steps.meta-golem-router.outputs.labels }}

  publish:
    needs:
      - build
      - unit-tests-and-checks
      - wasm-rpc-stub
      - worker-tests
      - it
    if: "startsWith(github.ref, 'refs/tags/v')"
    env:
      CARGO_BUILD_JOBS: 10
    runs-on: blacksmith-16vcpu-ubuntu-2204
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Setup Rust
        run: rustup update stable --no-self-update && rustup default stable
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: release
          cache-all-crates: true
          save-if: true
      - uses: davidB/rust-cargo-make@v1
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - id: get_version
        uses: battila7/get-version-action@v2
      - name: Purge v8 from cache
        run: cargo make --profile ci clear-v8
      - name: Publish all packages
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.version-without-v }}
        run: cargo make --profile ci publish

  publish-binaries:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && github.repository == 'golemcloud/golem'
    strategy:
      fail-fast: false
      matrix:
        project:
          - golem-cli
          - golem
        cfg:
          - rust-target: x86_64-unknown-linux-gnu
            os: blacksmith-16vcpu-ubuntu-2204
          - rust-target: aarch64-unknown-linux-gnu
            os: blacksmith-16vcpu-ubuntu-2204
            cross: true
          - rust-target: x86_64-apple-darwin
            os: macos-latest
          - rust-target: aarch64-apple-darwin
            os: macos-latest
          - rust-target: x86_64-pc-windows-gnu
            os: windows-latest
    name: Publish binaries of ${{ matrix.project }}
    runs-on: ${{ matrix.cfg.os }}
    permissions:
      contents: write
    env:
      CARGO_BUILD_JOBS: 10
    steps:
      - uses: actions/checkout@v4
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Setup Rust
        run: rustup update stable --no-self-update && rustup default stable && rustup target add ${{ matrix.cfg.rust-target }}
      - uses: davidB/rust-cargo-make@v1
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: "v0-rust"
          shared-key: release-${{ matrix.cfg.rust-target }}
          cache-all-crates: true
          save-if: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - id: get_version
        uses: battila7/get-version-action@v2
      - name: Set version for all packages
        env:
          VERSION: ${{ steps.get_version.outputs.version-without-v }}
        run: cargo make --profile ci set-version

      - run: cargo install cross
        if: ${{ matrix.cfg.cross }}
      - uses: ilammy/setup-nasm@v1

      - name: Purge v8 from cache
        run: cargo make --profile ci clear-v8
      - run: cargo build -p ${{ matrix.project }} --release --target ${{ matrix.cfg.rust-target }}
        if: ${{ ! matrix.cfg.cross }}
      - run: cross build -p ${{ matrix.project }} --release --target ${{ matrix.cfg.rust-target }}
        if: ${{ matrix.cfg.cross }}

      - run: mv ./target/${{ matrix.cfg.rust-target }}/release/${{ matrix.project }}.exe ./target/${{ matrix.cfg.rust-target }}/release/${{ matrix.project }}-${{ matrix.cfg.rust-target }}.exe
        if: matrix.cfg.os == 'windows-latest'
      - run: mv ./target/${{ matrix.cfg.rust-target }}/release/${{ matrix.project }} ./target/${{ matrix.cfg.rust-target }}/release/${{ matrix.project }}-${{ matrix.cfg.rust-target }}
        if: matrix.cfg.os != 'windows-latest'
      - name: Login GH CLI
        shell: bash
        run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
      - run: gh release upload -R golemcloud/golem-cli --clobber ${{ github.ref_name }} target/${{ matrix.cfg.rust-target }}/release/${{ matrix.project }}-${{ matrix.cfg.rust-target }}.exe
        if: matrix.cfg.os == 'windows-latest'
      - run: gh release upload -R golemcloud/golem-cli --clobber ${{ github.ref_name }} target/${{ matrix.cfg.rust-target }}/release/${{ matrix.project }}-${{ matrix.cfg.rust-target }}
        if: matrix.cfg.os != 'windows-latest'

  publish-slack-notification:
    needs:
      - publish
      - docker-publish
    if: ${{ always() && startsWith(github.ref, 'refs/tags/v') }}
    runs-on: blacksmith
    steps:
      - name: Publish Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ needs.publish.result }}
          SLACK_ICON: https://uploads-ssl.webflow.com/64721eeec7cd7ef4f6f1683e/64831138b73a996d0e831773_32.png
          SLACK_TITLE: "Release Notification"
          SLACK_MESSAGE: "Publish - cargo result: `${{ needs.publish.result }}`, docker result: `${{ needs.docker-publish.result }}`"
          SLACK_USERNAME: CI
          SLACK_WEBHOOK: ${{ secrets.SLACK_ALERT_URL }}

  windows-build-and-unit-tests:
    runs-on: windows-2022
    env:
      CARGO_BUILD_JOBS: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Setup Rust
        run: |
          rustup toolchain install stable --profile default --no-self-update
          rustup default stable
          rustup target add wasm32-wasip1

      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: windows
          cache-all-crates: true
          save-if: false

      - name: Build (workspace)
        env:
          RUSTFLAGS: -Ccodegen-units=8 -C debuginfo=1
        run: cargo build --workspace -j 2

      - name: Unit tests (library only)
        env:
          RUSTFLAGS: -Ccodegen-units=8 -C debuginfo=1
        run: cargo test --workspace --lib -j 2 -- --nocapture

  windows-full-unit-tests:
    runs-on: windows-2022
    env:
      CARGO_BUILD_JOBS: 10
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Setup Rust
        run: |
          rustup toolchain install stable --profile default --no-self-update
          rustup default stable
          rustup target add wasm32-wasip1
      - name: Rust cache
        uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: windows
          cache-all-crates: true
          save-if: false
          # Optionally: workspaces: true

      - name: Install cargo-make
        run: |
          echo "Installing cargo-make..."
          cargo install cargo-make --locked
          echo "Verifying cargo-make installation..."
          # Refresh environment variables and PATH
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          # Verify cargo-make is accessible
          cargo make --version
          echo "✅ cargo-make installed and verified successfully"

      - name: Build (workspace)
        env:
          RUSTFLAGS: -C codegen-units=8 -C debuginfo=1
        run: cargo build --workspace -j 2

      # Use cargo-make for your existing flows
      - name: Unit tests
        run: |
          # Ensure PATH is refreshed before running cargo make
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          cargo make --profile ci unit-tests

      - name: Check formatting and clippy rules
        run: |
          # Ensure PATH is refreshed before running cargo make
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          cargo make --profile ci check

      - name: Check openapi is up to date
        run: |
          # Ensure PATH is refreshed before running cargo make
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          cargo make --profile ci check-openapi

      - name: Check configs are up to date
        run: |
          # Ensure PATH is refreshed before running cargo make
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          cargo make --profile ci check-configs

  # Comprehensive Windows cargo make task testing matrix
  windows-cargo-make-matrix:
    runs-on: windows-2022
    if: github.event_name == 'push'
    continue-on-error: true  # Don't fail the workflow on individual task failures
    strategy:
      fail-fast: false  # Test all tasks even if some fail
      matrix:
        task:
          # Core Development Workflow
          - "dev-flow"
          # Build Tools
          - "build"
          - "wit"
          - "check-wit"
          # Code Quality Tools
          - "check"
          - "fix"
          # Testing Tools
          - "unit-tests"
          - "test"
          - "worker-executor-tests"
          - "integration-tests"
          - "sharding-tests-debug"
          # API Testing Tools
          - "api-tests-http"
          - "api-tests-grpc"
          # Configuration Tools
          - "generate-configs"
          - "check-configs"
          # OpenAPI Tools
          - "generate-openapi"
          - "check-openapi"
          # Service Tools
          - "run"
          - "run-with-login-enabled"
          # Docker Tools (optional)
          - "elastic-up"
    env:
      CARGO_BUILD_JOBS: 4
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
      GOLEM_USE_LOCAL_REDIS: "false"  # Use Testcontainers Redis by default
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install winget (required for Windows dependency installation)
        uses: Cyberboss/install-winget@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Windows dependencies via winget
        run: |
          # Verify winget is available
          winget --version
          
          # Install Visual Studio Build Tools (C++ toolchain)
          winget install --id Microsoft.VisualStudio.2022.BuildTools -e --override "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --passive --norestart" --accept-source-agreements --accept-package-agreements --disable-interactivity
          
          # Install CMake
          winget install --id Kitware.CMake -e --accept-source-agreements --accept-package-agreements --disable-interactivity
          
          # Install Podman for Testcontainers Redis
          winget install --id RedHat.Podman -e --accept-source-agreements --accept-package-agreements --disable-interactivity
          
          # Install Docker Desktop (optional, for docker-based tasks)
          winget install --id Docker.DockerDesktop -e --accept-source-agreements --accept-package-agreements --disable-interactivity || echo "Docker install failed, continuing..."

      - name: Install Redis and Memurai via Chocolatey
        uses: amitie10g/install-package@v1
        with:
          choco: redis memurai-developer

      - name: Verify Redis/Memurai installations
        run: |
          Write-Host "Verifying Redis/Memurai installations..."
          
          # Refresh environment variables to make redis/memurai available in PATH
          $env:Path = [Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [Environment]::GetEnvironmentVariable("Path","User")
          
          try {
            memurai --version
            Write-Host "✅ Memurai installed successfully"
          } catch {
            Write-Host "⚠️  Memurai version check failed: $_"
            Write-Host "PATH: $env:Path"
          }
          
          try {
            redis-server --version
            Write-Host "✅ Redis installed successfully" 
          } catch {
            Write-Host "⚠️  Redis version check failed: $_"
            Write-Host "PATH: $env:Path"
          }

      - name: Setup Rust
        run: |
          rustup toolchain install stable --profile default --no-self-update
          rustup default stable
          rustup target add wasm32-wasip1

      - name: Install cargo-make
        run: |
          echo "Installing cargo-make..."
          cargo install cargo-make --locked
          echo "Verifying cargo-make installation..."
          # Refresh environment variables and PATH
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          # Verify cargo-make is accessible
          cargo make --version
          echo "✅ cargo-make installed and verified successfully"

      - name: Rust cache
        uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: windows-matrix-${{ github.sha }}
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Test cargo make task - ${{ matrix.task }}
        id: cargo_task
        run: |
          echo "::group::Testing cargo make ${{ matrix.task }}"
          $start_time = Get-Date
          $exit_code = 0
          try {
            cargo make ${{ matrix.task }}
            $exit_code = $LASTEXITCODE
            $end_time = Get-Date
            $duration = ($end_time - $start_time).TotalSeconds
            if ($exit_code -eq 0) {
              echo "✅ SUCCESS: cargo make ${{ matrix.task }} (${duration}s)"
              echo "result=success" >> $env:GITHUB_OUTPUT
            } else {
              echo "❌ FAILED: cargo make ${{ matrix.task }} (${duration}s, exit code: $exit_code)"
              echo "result=failure" >> $env:GITHUB_OUTPUT
              exit $exit_code
            }
          } catch {
            $end_time = Get-Date
            $duration = ($end_time - $start_time).TotalSeconds
            echo "💥 ERROR: cargo make ${{ matrix.task }} (${duration}s, exception: $_)"
            echo "result=error" >> $env:GITHUB_OUTPUT
            exit 1
          }
          echo "::endgroup::"

      - name: Collect test results
        if: always()
        run: |
          echo "Task: ${{ matrix.task }}" >> windows-task-results.txt
          echo "Exit Code: $LASTEXITCODE" >> windows-task-results.txt
          echo "---" >> windows-task-results.txt

      - name: Upload task results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-task-results-${{ matrix.task }}
          path: windows-task-results.txt

      # Install cargo2junit for cross-platform test reporting
      - name: Install cargo2junit
        run: cargo install cargo2junit

      # Run tests and generate cross-platform JUnit XML
      - name: Run tests and generate JUnit report
        id: test_run
        run: |
          $env:RUSTC_BOOTSTRAP=1
          # Run tests with JSON output and convert to JUnit XML
          cargo test --workspace -- -Z unstable-options --format json --report-time | Tee-Object results.json
          if ($LASTEXITCODE -ne 0) {
            echo "Tests failed, but continuing to generate report"
          }
          Get-Content results.json | cargo2junit | Out-File junit.xml -Encoding utf8
          echo "junit-generated=true" >> $env:GITHUB_OUTPUT
        continue-on-error: true

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "junit.xml"
          detailed_summary: true
          include_passed: true

      - name: Upload reports and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-ci-artifacts-${{ matrix.task }}-${{ github.run_id }}
          path: |
            results.json
            junit.xml
            target/**/*.log
